export interface SphereWaveformProps {
    vertexCount?: number;
    volume: number;
    radius?: number;
    pointSize?: number;
    shellCount?: number;
    seed?: number;
    freezeTime?: boolean;
    advanceCount?: number;
    advanceAmount?: number;
    size?: number;
    opacity?: number;
    rotationX?: number;
    rotationY?: number;
    rotationZ?: number;
    enableRandomishNoise?: boolean;
    randomishAmount?: number;
    enableSineNoise?: boolean;
    sineAmount?: number;
    randomishSpeed?: number;
    pulseSize?: number;
    enableRippleNoise?: boolean;
    rippleAmount?: number;
    rippleSpeed?: number;
    rippleScale?: number;
    enableSurfaceRipple?: boolean;
    surfaceRippleAmount?: number;
    surfaceRippleSpeed?: number;
    surfaceRippleScale?: number;
    enableSpin?: boolean;
    spinSpeed?: number;
    spinAxisX?: number;
    spinAxisY?: number;
    maskEnabled?: boolean;
    maskRadius?: number;
    maskFeather?: number;
    maskInvert?: boolean;
    sineSpeed?: number;
    sineScale?: number;
    pointColor?: string;
    glowColor?: string;
    glowStrength?: number;
    glowRadiusFactor?: number;
    enableGradient?: boolean;
    gradientColor2?: string;
    gradientAngle?: number;
    sizeRandomness?: number;
    enableArcs?: boolean;
    arcMaxCount?: number;
    arcSpawnRate?: number;
    arcDuration?: number;
    arcSpeed?: number;
    arcSpanDeg?: number;
    arcThickness?: number;
    arcFeather?: number;
    arcBrightness?: number;
    arcAltitude?: number;
    blendingMode?: 'additive' | 'normal';
    micEnvelope?: number;
    randomishMicModAmount?: number;
    sineMicModAmount?: number;
    rippleMicModAmount?: number;
    surfaceRippleMicModAmount?: number;
    transition?: TransitionOptions;
    morph?: {
        enabled?: boolean;
        progress?: number;
        to?: Partial<SphereWaveformProps>;
    };
}
type AnimEase = 'linear' | 'power1.in' | 'power1.out' | 'power1.inOut' | 'power2.in' | 'power2.out' | 'power2.inOut' | 'power3.in' | 'power3.out' | 'power3.inOut' | 'power4.in' | 'power4.out' | 'power4.inOut' | 'sine.in' | 'sine.out' | 'sine.inOut' | 'expo.in' | 'expo.out' | 'expo.inOut' | 'back.in' | 'back.out' | 'back.inOut' | 'elastic.in' | 'elastic.out' | 'elastic.inOut' | 'bounce.in' | 'bounce.out' | 'bounce.inOut';
export interface TransitionOptions {
    enabled?: boolean;
    mode?: 'lerp';
    duration?: number;
    ease?: AnimEase;
    onStart?: () => void;
    onComplete?: () => void;
}
export declare function SphereWaveform({ vertexCount, volume, radius, pointSize, shellCount, seed, freezeTime, advanceCount, advanceAmount, size, opacity, rotationX, rotationY, rotationZ, enableRandomishNoise, randomishAmount, enableSineNoise, sineAmount, pulseSize, enableSpin, spinSpeed, randomishSpeed, enableRippleNoise, rippleAmount, rippleSpeed, rippleScale, enableSurfaceRipple, surfaceRippleAmount, surfaceRippleSpeed, surfaceRippleScale, spinAxisX, spinAxisY, maskEnabled, maskRadius, maskFeather, maskInvert, sineSpeed, sineScale, pointColor, glowColor, glowStrength, glowRadiusFactor, enableGradient, gradientColor2, gradientAngle, sizeRandomness, enableArcs, arcMaxCount, arcSpawnRate, arcDuration, arcSpeed, arcSpanDeg, arcThickness, arcFeather, arcBrightness, arcAltitude, micEnvelope, randomishMicModAmount, sineMicModAmount, rippleMicModAmount, surfaceRippleMicModAmount, transition, morph, }: SphereWaveformProps): import("react/jsx-runtime").JSX.Element;
export default SphereWaveform;
//# sourceMappingURL=SphereWaveform.d.ts.map